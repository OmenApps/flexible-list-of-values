# Generated by Django 4.1.5 on 2023-01-13 18:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Tenant Name")),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_tenants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True, related_name="tenants", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TenantCropLOVSelection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lov_entity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="testapp.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant Crop Selection",
                "verbose_name_plural": "Tenant Crop Selections",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TenantCropLOVValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("dm", "Default Mandatory"),
                            ("do", "Default Optional"),
                            ("cu", "Custom"),
                        ],
                        default="do",
                        max_length=3,
                        verbose_name="Option Type",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Value Name")),
                (
                    "deleted",
                    models.DateTimeField(
                        blank=True, help_text="When was this value deleted?", null=True
                    ),
                ),
                (
                    "lov_associated_entities",
                    models.ManyToManyField(
                        related_name="%(app_label)s_%(class)s_selections",
                        related_query_name="%(app_label)s_%(class)ss_selected",
                        through="testapp.TenantCropLOVSelection",
                        to="testapp.tenant",
                    ),
                ),
                (
                    "lov_entity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_related",
                        related_query_name="%(app_label)s_%(class)ss",
                        to="testapp.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant Crop Value",
                "verbose_name_plural": "Tenant Crop Values",
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserCrop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("crops", models.ManyToManyField(to="testapp.tenantcroplovvalue")),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_crops",
                        to="testapp.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_crops",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="tenantcroplovselection",
            name="lov_value",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_related",
                related_query_name="%(app_label)s_%(class)ss",
                to="testapp.tenantcroplovvalue",
            ),
        ),
        migrations.AddConstraint(
            model_name="tenantcroplovvalue",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                models.F("lov_entity"),
                name="testapp_tenantcroplovvalue_name_val",
            ),
        ),
        migrations.AddConstraint(
            model_name="tenantcroplovvalue",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("lov_entity__isnull", False), ("value_type", "cu")),
                    models.Q(("lov_entity__isnull", True), ("value_type", "dm")),
                    models.Q(("lov_entity__isnull", True), ("value_type", "do")),
                    _connector="OR",
                ),
                name="testapp_tenantcroplovvalue_no_mandatory_entity",
            ),
        ),
        migrations.AddConstraint(
            model_name="tenantcroplovselection",
            constraint=models.UniqueConstraint(
                models.F("lov_entity"),
                models.F("lov_value"),
                name="testapp_tenantcroplovselection_name_val",
            ),
        ),
    ]
